name: .NET Core Build and Publish

on:
  push:
    branches: master
  pull_request:
    branches: master

env:
  NETCORE_VERSION: '5.x'  
  GIT_REPO_ROOT: src
  MAJOR_MINOR_VERSION: 1.1.
  SOLUTION_FILE: JsonCSharpClassGenerator.sln

jobs:
  build:
    name: Build Package 
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core SDK ${{ env.NETCORE_VERSION }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.NETCORE_VERSION }}

    - name: Restore
      working-directory: ${{ env.GIT_REPO_ROOT }}        
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build
      working-directory: ${{ env.GIT_REPO_ROOT }}        
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Debug --no-restore

    # - name: Run Unit Tests and Generate Coverage
    #   uses: glennawatson/coverlet-msbuild@v1
    #   with:
    #     project-files: '**/*Tests.csproj'
    #     no-build: true  
    #     output-format: cobertura
    #     output: results
    #     configuration: Debug
        
    - name: Pack
      working-directory: ${{ env.GIT_REPO_ROOT }}    
      run: dotnet pack ${{ env.SOLUTION_FILE }} --configuration Debug -o finalpackage --no-build -p:PackageVersion=${{ env.MAJOR_MINOR_VERSION }}${{ github.run_number }}

    - name: Publish artifact
      uses: actions/upload-artifact@master
      with:
        name: nupkg
        path: ${{ env.GIT_REPO_ROOT }}/finalpackage

    # - uses: codecov/codecov-action@v1
    #   with:
    #     files: src/... # optional
    #     fail_ci_if_error: true # optional (default = false)

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    name: Deploy Packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Package artifact
        uses: actions/download-artifact@master
        with:
          name: nupkg
          path: ./nupkg

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
        with:
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
          nuget-version: latest

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.NETCORE_VERSION }}

      - name: Push to NuGet
        run: dotnet nuget push nupkg/**/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://nuget.org --skip-duplicate

      - name: publish build for Windows
        run: dotnet publish src/JsonClassGeneratorConsole/JsonClassGeneratorConsole.csproj /p:PublishSingleFile=true -r win-x64 -c Release --self-contained 

      - name: publish build for Linux
        run: dotnet publish src/JsonClassGeneratorConsole/JsonClassGeneratorConsole.csproj /p:PublishSingleFile=true -r linux-x64 -c Release --self-contained 

      - name: Create tag
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/v${{ env.MAJOR_MINOR_VERSION }}${{ github.run_number }}",
              sha: context.sha
            })

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.MAJOR_MINOR_VERSION }}${{ github.run_number }}
          name: Release ${{ env.MAJOR_MINOR_VERSION }}${{ github.run_number }}
          fail_on_unmatched_files: true
          files: | 
                 src/JsonClassGeneratorConsole/bin/Release/net5.0/linux-x64/publish/JsonClassGeneratorConsole
                 src/JsonClassGeneratorConsole/bin/Release/net5.0/win-x64/publish/JsonClassGeneratorConsole.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      